{"version":3,"sources":["aws-exports.js","Demo.js","serviceWorker.js","chatbot.js","index.js"],"names":["awsmobile","Amplify","configure","config","Option","Select","layout","labelCol","span","wrapperCol","tailLayout","offset","Demo","Form","useForm","form","className","name","onFinish","values","console","log","Item","label","rules","required","placeholder","onChange","value","setFieldsValue","temperature","allowClear","noStyle","shouldUpdate","prevValues","currentValues","status","getFieldValue","type","htmlType","onClick","resetFields","Boolean","window","location","hostname","match","Chatbot","state","input","finalMessage","messages","Message","id","message","_handleKeyPress","e","key","submitMessage","target","this","setState","Interactions","send","response","responseMessage","dialogState","intentName","slots","style","styles","header","headerTitle","messagesContainer","hasInputField","bubbleStyles","onKeyPress","bind","Component","text","fontSize","chatbubble","borderRadius","padding","color","backgroundColor","borderTop","display","flexDirection","alignItems","outline","width","border","borderBottom","ReactDOM","render","class","size","fgColor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.187f17f2.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is Auto-Generated by AWS Mobile Hub. It will be overwritten.\n\n// Copyright 2017-2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.\n// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to\n// copy, distribute and modify it.\n\n// AWS Mobile Hub Project Constants\nconst awsmobile = {\n    'aws_app_analytics': 'enable',\n    'aws_bots': 'enable',\n    'aws_bots_config': [{\"name\":\"CovidSymptoms\",\"alias\":\"$LATEST\",\"description\":\"\",\"bot-template\":\"bot-import\",\"commands-help\":[],\"region\":\"us-west-2\"}],\n    'aws_cognito_identity_pool_id': 'us-west-2:cf56b9dd-b864-42d3-9772-f84bca5868af',\n    'aws_cognito_region': 'us-west-2',\n    'aws_content_delivery': 'enable',\n    'aws_content_delivery_bucket': 'reactchatbot-hosting-mobilehub-1960898691',\n    'aws_content_delivery_bucket_region': 'us-west-2',\n    'aws_content_delivery_cloudfront': 'enable',\n    'aws_content_delivery_cloudfront_domain': 'd2le19wnqmk02y.cloudfront.net',\n    'aws_mobile_analytics_app_id': '9c540cb14f5d4d0a9c39c079dfd07eaf',\n    'aws_mobile_analytics_app_region': 'us-east-1',\n    'aws_project_id': 'c679c960-fdfb-42a0-ac2e-6a54a552db12',\n    'aws_project_name': 'react-chatbot-2020-04-28-14-58-10',\n    'aws_project_region': 'us-west-2',\n    'aws_resource_name_prefix': 'reactchatbot-mobilehub-1960898691',\n    'aws_sign_in_enabled': 'enable',\n    'aws_user_pools': 'enable',\n    'aws_user_pools_id': 'us-west-2_X70CPcZDB',\n    'aws_user_pools_mfa_type': 'ON',\n    'aws_user_pools_web_client_id': '23t8lk7hb58dm7cohh2avg93br',\n}\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Form, Input, Button, Select, DatePicker } from 'antd';\nimport config from './aws-exports' // new\nimport Amplify from 'aws-amplify' // new\nAmplify.configure(config) // new\n\nconst { Option } = Select;\nconst layout = {\n  labelCol: {\n    span: 5,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Demo = () => {\n  const [form] = Form.useForm();\n\n  const onHealthStatusChange = value => {\n    switch (value) {\n      case 'health':\n        form.setFieldsValue({\n          temperature: '37',\n        });\n        return;\n\n      case 'sympton':\n        form.setFieldsValue({\n          temperature: '38',\n        });\n        return;\n\n      case 'other':\n        form.setFieldsValue({\n          temperature: '37',\n        });\n    }\n  };\n\n  const onFinish = values => {\n    console.log(values);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onFill = () => {\n    form.setFieldsValue({\n      temperature: '37',\n      status: 'healthy',\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Form {...layout} form={form} name=\"control-hooks\" onFinish={onFinish}>\n      <Form.Item\n        name=\"temperature\"\n        label=\"Body Temperature\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name=\"status\"\n        label=\"Status\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select\n          placeholder=\"Select a option and change input text above\"\n          onChange={onHealthStatusChange}\n          allowClear\n        >\n          <Option value=\"health\">Feeling Good</Option>\n          <Option value=\"sympton\">Symptons of Cold&Flu</Option>\n          <Option value=\"other\">Other</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prevValues, currentValues) => prevValues.status !== currentValues.status}\n      >\n        {({ getFieldValue }) =>\n          getFieldValue('status') === 'other' ? (\n            <Form.Item\n              name=\"customizeStatus\"\n              label=\"Customize Your Health Status\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          ) : null\n        }\n      </Form.Item>\n      <Form.Item\n          name=\"date\"\n              label=\"Select The Date\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n      >\n         <DatePicker />\n      </Form.Item>\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n        <Button htmlType=\"button\" onClick={onReset}>\n          Reset\n        </Button>\n        <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\n          Fill form\n        </Button>\n      </Form.Item>\n    </Form>\n    </div>\n  );\n};\n\nexport default Demo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport config from './aws-exports' // new\nimport Amplify from 'aws-amplify' // new\nimport { Interactions } from 'aws-amplify';\nimport { ChatFeed, Message } from 'react-chat-ui'\nAmplify.configure(config) // new\n\nclass Chatbot extends Component {\n    state = {\n      input: '',\n      finalMessage: '',\n      messages: [\n        new Message({\n          id: 1,\n          message: \"Hello, how can I help you today?\",\n        })\n      ]\n    }\n    _handleKeyPress = (e) => {\n      if (e.key === 'Enter') {\n        this.submitMessage()\n      }\n    }\n    onChange(e) {\n      const input = e.target.value\n      this.setState({\n        input\n      })\n    }\n    async submitMessage() {\n      const { input } = this.state\n      if (input === '') return\n      const message = new Message({\n        id: 0,\n        message: input,\n      })\n      let messages = [...this.state.messages, message]\n  \n      this.setState({\n        messages,\n        input: ''\n      })\n      const response = await Interactions.send(\"CovidSymptoms\", input);\n      const responseMessage = new Message({\n        id: 1,\n        message: response.message,\n      })\n      messages  = [...this.state.messages, responseMessage]\n      this.setState({ messages })\n  \n      if (response.dialogState === 'Fulfilled') {\n        if (response.intentName === 'CovidSymptoms') {\n          const { slots: { temperature } } = response\n          const finalMessage = `${temperature}`\n          this.setState({ finalMessage })\n        }\n      }\n    }\n    render() {\n      return (\n        <div className=\"Chatbot\">\n          <header style={styles.header}>\n            <p style={styles.headerTitle}>Welcome to my Covid Symptoms Checker bot!</p>\n          </header>\n          <div style={styles.messagesContainer}>\n          <h2>{this.state.finalMessage}</h2>\n          <ChatFeed\n            messages={this.state.messages}\n            hasInputField={false}\n            bubbleStyles={styles.bubbleStyles}\n          />\n  \n          <input\n            onKeyPress={this._handleKeyPress}\n            onChange={this.onChange.bind(this)}\n            style={styles.input}\n            value={this.state.input}\n          />\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  const styles = {\n    bubbleStyles: {\n      text: {\n        fontSize: 16,\n      },\n      chatbubble: {\n        borderRadius: 30,\n        padding: 10\n      }\n    },\n    headerTitle: {\n      color: 'white',\n      fontSize: 22\n    },\n    header: {\n      backgroundColor: 'rgb(0, 132, 255)',\n      padding: 20,\n      borderTop: '12px solid rgb(204, 204, 204)'\n    },\n    messagesContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: 10,\n      alignItems: 'center'\n    },\n    input: {\n      fontSize: 16,\n      padding: 10,\n      outline: 'none',\n      width: 350,\n      border: 'none',\n      borderBottom: '2px solid rgb(0, 132, 255)'\n    }\n  }\n  \n  export default Chatbot","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Demo from './Demo';\nimport config from './aws-exports' // new\nimport Amplify from 'aws-amplify' // new\nimport * as serviceWorker from './serviceWorker';\nimport QRCode from 'qrcode.react';\nimport {Button} from 'antd';\nimport Chatbot from './chatbot';\nAmplify.configure(config) // new\n\n\nReactDOM.render(\n\t<div className=\"App\">\n\t\t<div class=\"Headers\">\n\t\t\t<h1>Covid-19 Pass</h1> \n    \t\t<QRCode value='https://twitter.com/realDonaldTrump/'\n    \t\t\tsize={150} // size\n    \t\t\tfgColor=\"#00FF00\" // QRcode color\n    \t\t/>\n    \t\t<Button type=\"primary\" htmlType=\"update\">\n          \t\tUpdate QR Code\n        \t</Button>\n\t\t</div>\n\n\t\t<div class=\"Form\">\n\t\t\t<Demo />\n\t\t</div>\n\t\t<div>\n\t\t\t<Chatbot />\n\t\t</div>\n    </div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}