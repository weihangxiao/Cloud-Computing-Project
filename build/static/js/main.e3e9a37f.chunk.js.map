{"version":3,"sources":["components/getWeb3.js","components/HealthForm.js","components/Code.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","HealthForm","props","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","HealthRecordContract","networks","instance","Contract","abi","address","setState","contract","runExample","alert","error","onSubmit","state","name","temp","status","date","date_as_int","Date","getTime","methods","hasRecord","call","addRecord","send","from","addUser","nameChange","bind","tempChange","statusChange","dateChange","event","this","target","value","action","type","onChange","required","React","Component","Code","color","healthClass","codeValue","onUpdateQRCode","getUserCode","today","month","getUTCMonth","day","getUTCDate","year","getUTCFullYear","today_str","today_as_int","all_log","gap","getsRecord","record","push","JSON","stringify","size","fgColor","htmlType","onClick","TabPane","Tabs","App","join","webrtc","joinRoom","handleCreatedPeer","peer","addChat","id","substring","handlePeerData","payload","message","chatLog","concat","timestamp","now","options","debug","dataOnly","className","Navbar","bg","variant","class","defaultActiveKey","tab","key","forceRender","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3e9a37f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport '../index.css';\nimport HealthRecordContract from \"./contracts/HealthRecord.json\";\nimport getWeb3 from \"./getWeb3\";\n\nclass HealthForm extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: null, accounts: null, contract: null,\n\t\t}\n\t\tthis.nameChange = this.nameChange.bind(this);\n\t\tthis.tempChange = this.tempChange.bind(this);\n\t\tthis.statusChange = this.statusChange.bind(this);\n\t\tthis.dateChange = this.dateChange.bind(this);\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t}\n\n\tcomponentDidMount = async () => {\n\t\ttry {\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = await getWeb3();\n\n\t\t\t// Use web3 to get the user's accounts.\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.eth.net.getId();\n\t\t\tconst deployedNetwork = HealthRecordContract.networks[networkId];\n\t\t\tconst instance = new web3.eth.Contract(\n\t\t\t\tHealthRecordContract.abi,\n\t\t\t\tdeployedNetwork && deployedNetwork.address,\n\t\t\t);\n\n\t\t\t// Set web3, accounts, and contract to the state, and then proceed with an\n\t\t\t// example of interacting with the contract's methods.\n\t\t\tthis.setState({ web3, accounts, contract: instance }, this.runExample);\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`,\n\t\t\t);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tonSubmit = async () => {\n\t\tconst { web3, accounts, contract } = this.state;\n\t\tconsole.log(this.state)\n\t\tvar name = this.state.name;\n\t\tvar temp = this.state.temp;\n\t\tvar status = this.state.status == \"sick\";\n\t\tvar date = this.state.date;\n\t\tvar date_as_int = new Date(date).getTime();\n\t\tconsole.log(name, temp, status, date, date_as_int);\n\t\tconst hasRecord = await contract.methods.hasRecord().call();\n\t\tif (hasRecord) {\n\t\t\tconsole.log(\"User exists!\");\n\t\t\tcontract.methods.addRecord(temp, status, date_as_int).send({ from: accounts[0] });\n\t\t} else {\n\t\t\tconsole.log(\"User does not exist! Add user\");\n\t\t\tcontract.methods.addUser(\"name\", temp, status, date_as_int).send({ from: accounts[0] });\n\t\t}\n\t};\n\n\tnameChange(event) {\n\t\tthis.setState({ name: event.target.value });\n\t}\n\n\ttempChange(event) {\n\t\tthis.setState({ temp: event.target.value });\n\t}\n\n\tstatusChange(event) {\n\t\tthis.setState({ status: event.target.value });\n\t}\n\n\tdateChange(event) {\n\t\tthis.setState({ date: event.target.value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form action=\"#\" onSubmit={this.onSubmit}>\n\t\t\t\t<label>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tName:\n          \t\t\t\t<input type=\"text\" onChange={this.nameChange} required />\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tTemperature:\n\t\t\t\t\t\t<input type=\"number\" onChange={this.tempChange} required />\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tStatus:\n\t\t\t\t\t\t{/* <input type=\"text\" onChange={this.statusChange} required/> */}\n\t\t\t\t\t\t<select onChange={this.statusChange}>\n\t\t\t\t\t\t\t<option value=\"sick\">sick</option>\n\t\t\t\t\t\t\t<option value=\"good\">good</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tDate:\n\t\t\t\t\t\t<input type=\"date\" onChange={this.dateChange} required />\n\t\t\t\t\t</p>\n\t\t\t\t</label>\n\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t</form>\n\t\t);\n\t}\n\n}\n\nexport default HealthForm;\n","import React from 'react';\nimport QRCode from 'qrcode.react';\nimport { Button } from 'antd';\nimport HealthRecordContract from \"./contracts/HealthRecord.json\";\nimport getWeb3 from \"./getWeb3\";\n\n\nclass Code extends React.Component {\n\tcolor = [\"#00FF00\", \"#FFD700\", \"#DC143C\"];\n\tstate = {\n\t\tweb3: null, accounts: null, contract: null,\n\t\thealthClass: -1,\n\t\tcodeValue: \"\" // 记录该账号过去所以记录的一个数据结构（扫码后可见）,在表单js文件写入区块链的，可以用一个json来存\n\t}\n\n\tcomponentDidMount = async () => {\n\t\ttry {\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = await getWeb3();\n\n\t\t\t// Use web3 to get the user's accounts.\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\talert(accounts);\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.eth.net.getId();\n\t\t\tconst deployedNetwork = HealthRecordContract.networks[networkId];\n\t\t\tconst instance = new web3.eth.Contract(\n\t\t\t\tHealthRecordContract.abi,\n\t\t\t\tdeployedNetwork && deployedNetwork.address,\n\t\t\t);\n\n\t\t\t// Set web3, accounts, and contract to the state, and then proceed with an\n\t\t\t// example of interacting with the contract's methods.\n\t\t\tthis.setState({ web3, accounts, contract: instance }, this.runExample);\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`,\n\t\t\t);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tonUpdateQRCode = async () => {\n\t\tconst { contract } = this.state;\n\t\tconst hasRecord = await contract.methods.hasRecord().call();\n\t\tconsole.log(\"hasRecord:\", hasRecord);\n\t\tif (hasRecord) {\n\t\t\tconst status = await contract.methods.getUserCode().call();\n\t\t\tthis.setState({ healthClass: status });\n\t\t\tvar gap;\n\t\t\tvar today = new Date();\n\t\t\tvar month = today.getUTCMonth() + 1; //months from 1-12\n\t\t\tvar day = today.getUTCDate();\n\t\t\tvar year = today.getUTCFullYear();\n\t\t\tvar today_str = year + \"/\" + month + \"/\" + day;\n\t\t\tvar today_as_int = new Date(today_str).getTime();\n\t\t\tconsole.log(today_str, today_as_int);\n\t\t\tvar all_log = [];\n\t\t\tfor (gap = 0; gap < 14; gap++) {\n\t\t\t\tvar record = await contract.methods.getsRecord(today_as_int, gap).call();\n\t\t\t\tif (record[0] > 0) {\n\t\t\t\t\tlet status = \"good\";\n\t\t\t\t\tif (record[2]) {\n\t\t\t\t\t\tstatus = \"sick\";\n\t\t\t\t\t}\n\t\t\t\t\tvar date = new Date(record[0] / 1);\n\t\t\t\t\tlet log = {\n\t\t\t\t\t\t\"date\": date,\n\t\t\t\t\t\t\"temperature\": record[1],\n\t\t\t\t\t\t\"status\": status\n\t\t\t\t\t}\n\t\t\t\t\tall_log.push(log);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(all_log);\n\t\t\tthis.setState({ codeValue: JSON.stringify(all_log) });\n\t\t} else {\n\t\t\tconsole.log(\"User does not exist!\");\n\t\t\tthis.setState({ healthClass: -1 });\n\t\t}\n\t}\n\trender() {\n\t\t{/* if (!this.state.web3) {\n\t\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t\t} */}\n\t\treturn (<div>\n\t\t\t<QRCode value={this.state.codeValue}\n\t\t\t\tsize={120} // size\n\t\t\t\tfgColor={this.color[this.state.healthClass]} // QRcode color\n\t\t\t/>\n\t\t\t<br></br>\n\t\t\t<Button type=\"primary\" htmlType=\"update\" onClick={this.onUpdateQRCode}>\n\t\t\t\tUpdate QR Code\n    </Button>\n\t\t</div>)\n\t}\n}\nexport default Code;\n","import React, { Component } from 'react';\n// import config from './aws-exports' // new\n// import Amplify from 'aws-amplify' // new\nimport HealthForm from './components/HealthForm';\nimport Code from './components/Code';\n// import ChatBox from './components/ChatBox';\nimport './css/App.css'\n// import { LioWebRTC } from 'react-liowebrtc';\nimport { Navbar, Form, Nav, FormControl } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Link, Switch} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Tabs } from 'antd';\n// Amplify.configure(config) // new\n\nconst { TabPane } = Tabs;\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatLog: [],\n            options: {\n                debug: true,\n                dataOnly: true\n            }\n        }\n    }\n\n    join = (webrtc) => webrtc.joinRoom('my-p2p-app-demo');\n\n    handleCreatedPeer = (webrtc, peer) => {\n        this.addChat(`Peer-${peer.id.substring(0, 5)} joined the room!`, ' ', true);\n    }\n\n    handlePeerData = (webrtc, type, payload, peer) => {\n        switch (type) {\n            case 'chat':\n                this.addChat(`Peer-${peer.id.substring(0, 5)}`, payload);\n                break;\n            default:\n                return;\n        };\n    }\n\n    addChat = (name, message, alert = false) => {\n        this.setState({\n            chatLog: this.state.chatLog.concat({\n                name,\n                message: `${message}`,\n                timestamp: `${Date.now()}`,\n                alert\n            })\n        });\n    }\n\n    render() {\n        const { chatLog, options } = this.state;\n        return (\n            <div className=\"App\">\n                <Navbar className=\"headerbar\" bg=\"dark\" variant=\"dark\">\n                    <div class=\"col-4\"></div>\n                    <div class=\"home col-4\" className=\"title\">\n                        <div class=\"h3\">Covid-19 Symptom Checker</div>\n                    </div>\n                    {/* <Navbar.Brand style={style.customflex}>Covid-19 Symptom Checker</Navbar.Brand> */}\n                </Navbar>\n                <br></br>\n\n                <Tabs defaultActiveKey=\"1\">\n                  <TabPane tab=\"Code\" key=\"1\" forceRender=\"true\">\n                      <Code />\n                  </TabPane>\n                  <TabPane tab=\"Form\" key=\"2\" forceRender=\"true\">\n                      <HealthForm />\n                  </TabPane>\n                  <TabPane tab=\"Chat\" key=\"3\" forceRender=\"true\">\n                      <div>\n                       Todo: This is the Chatbot Page\n                      </div>\n                  </TabPane>\n                </Tabs>\n                {/*Meet some bugs using the router method for the healthForm/Code, can change the page but when\n                changing to new router and then back will lead to state loss issue, the eth account is reset...*/}\n                {/*<Router>\n                    <div className = \"link\">\n                      <Link to=\"/input\"> Input </Link>\n                      <Link to=\"/chatbot\"> Chatbot </Link>\n                    </div>\n                    <Switch>\n                     <Route exact path=\"/\">\n                       <p>Select One Service </p>\n                     </Route>\n                      <Route path=\"/input\">\n                          <Code />\n                          <br></br>\n                          <HealthForm />\n                      </Route>\n                      <Route path=\"/chatbot\">\n                        <div>\n                            TODO: fill the chatbot page\n                        </div>}\n                      </Route>\n                    </Switch>\n                    {/*<Route path=\"/chatbot\" render={props =>\n                        <div>\n                            <LioWebRTC\n                                options={options}\n                                onReady={this.join}\n                                onCreatedPeer={this.handleCreatedPeer}\n                                onReceivedPeerData={this.handlePeerData}\n                            >\n                                <ChatBox\n                                    chatLog={chatLog}\n                                    onSend={(msg) => msg && this.addChat('Me', msg)}\n                                />\n                            </LioWebRTC>\n                        </div>}\n                    />\n                </Router> **/}\n            </div >\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n\t<App />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA */}\n\n\n\n\nserviceWorker.register();\n"],"sourceRoot":""}