{"version":3,"sources":["aws-exports.js","chatbot.js","HealthForm.js","ChatBox.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","Amplify","configure","config","Component","styles","bubbleStyles","text","fontSize","chatbubble","borderRadius","padding","headerTitle","display","flexDirection","alignItems","color","header","backgroundColor","messagesContainer","input","outline","width","border","borderBottom","Select","Option","ChatBox","props","generateChats","chatBox","setTimeout","scrollTop","scrollHeight","chatLog","map","item","className","key","name","timestamp","style","alert","message","handleSend","chatMsg","webrtc","shout","onSend","handleKeyUp","evt","keyCode","state","initalMessage","submitMessage","setState","handleInputChange","target","value","finalMessage","messages","Message","id","this","Interactions","send","response","responseMessage","dialogState","intentName","ref","div","hasInputField","length","type","placeholder","onKeyUp","onChange","withWebRTC","App","join","joinRoom","handleCreatedPeer","peer","addChat","substring","handlePeerData","payload","concat","Date","now","options","debug","dataOnly","Navbar","bg","variant","class","onReady","onCreatedPeer","onReceivedPeerData","msg","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf11311d.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is Auto-Generated by AWS Mobile Hub. It will be overwritten.\n\n// Copyright 2017-2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.\n// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to\n// copy, distribute and modify it.\n\n// AWS Mobile Hub Project Constants\nconst awsmobile = {\n    'aws_app_analytics': 'enable',\n    'aws_bots': 'enable',\n    'aws_bots_config': [{\"name\":\"CovidSymptoms\",\"alias\":\"$LATEST\",\"description\":\"\",\"bot-template\":\"bot-import\",\"commands-help\":[],\"region\":\"us-west-2\"}],\n    'aws_cognito_identity_pool_id': 'us-west-2:d3771c62-310b-49b6-8500-aacdc2cca3a2',\n    'aws_cognito_region': 'us-west-2',\n    'aws_content_delivery': 'enable',\n    'aws_content_delivery_bucket': 'cloudcomputingprojec-hosting-mobilehub-180291652',\n    'aws_content_delivery_bucket_region': 'us-west-2',\n    'aws_content_delivery_cloudfront': 'enable',\n    'aws_content_delivery_cloudfront_domain': 'db9130asxpbun.cloudfront.net',\n    'aws_mobile_analytics_app_id': '2bae3e0d3bea4d5b9d32b501907ecce9',\n    'aws_mobile_analytics_app_region': 'us-east-1',\n    'aws_project_id': 'a6923838-78df-4961-8ff5-83600869c83b',\n    'aws_project_name': 'Cloud-Computing-Project-2020-04-28-22-57-35',\n    'aws_project_region': 'us-west-2',\n    'aws_resource_name_prefix': 'cloudcomputingprojec-mobilehub-180291652',\n    'aws_sign_in_enabled': 'enable',\n    'aws_user_pools': 'enable',\n    'aws_user_pools_id': 'us-west-2_8av6o8gd7',\n    'aws_user_pools_mfa_type': 'ON',\n    'aws_user_pools_web_client_id': '1fgto4rkg3t2i4dnphmfm8it8s',\n}\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport config from './aws-exports' // new\nimport Amplify from 'aws-amplify' // new\nimport { Interactions } from 'aws-amplify';\nimport { ChatFeed, Message } from 'react-chat-ui'\nAmplify.configure(config) // new\n\nclass Chatbot extends Component {\n    state = {\n      input: '',\n      finalMessage: '',\n      messages: [\n        new Message({   // set initial message which is hte first item in the array of message being held in our state\n          id: 1,\n          message: \"Hello, how can I help you today?\",\n        })\n      ]\n    }\n    _handleKeyPress = (e) => { // This will listen to the keyboard input and submit a new message if the Enter key is pressed.\n      if (e.key === 'Enter') {\n        this.submitMessage()\n      }\n    }\n    onChange(e) { //update the input field with the current value of the text input\n      const input = e.target.value\n      this.setState({\n        input\n      })\n    }\n\n    \n    async submitMessage() {\n      const { input } = this.state\n      if (input === '') return\n      const message = new Message({ //input message\n        id: 0,\n        message: input,\n      })\n      let messages = [...this.state.messages, message]\n  \n      this.setState({\n        messages,\n        input: ''\n      })\n      const response = await Interactions.send(\"CovidSymptoms\", input); // passing two argumens: the bot name and the value\n      const responseMessage = new Message({ // take the response from the bot and create another message\n        id: 1,\n        message: response.message,\n      })\n      messages  = [...this.state.messages, responseMessage]\n      this.setState({ messages })\n  \n      if (response.dialogState === 'Fulfilled') {\n        if (response.intentName === 'CovidSymptomsChecking') {\n          //const { slots: { Temperature, answerquestion, Symptomscheck} } = response\n          const finalMessage = `Chat Ending!`\n          this.setState({ finalMessage })\n        }\n      }\n    }\n    render() {\n      return (\n        <div className=\"Chatbot\">\n          <header style={styles.header}>\n            <h1 style={styles.headerTitle}>Welcome to my Covid Symptoms Checker bot!</h1>\n          </header>\n          <div style={styles.messagesContainer}>\n          <h2>{this.state.finalMessage}</h2>\n          <ChatFeed\n            messages={this.state.messages}\n            hasInputField={false}\n            bubbleStyles={styles.bubbleStyles}\n          />\n  \n          <input\n            onKeyPress={this._handleKeyPress}\n            onChange={this.onChange.bind(this)}\n            style={styles.input}\n            value={this.state.input}\n          />\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  const styles = {\n    bubbleStyles: {\n      text: {\n        fontSize: 16,\n        \n      },\n      chatbubble: {\n        borderRadius: 30,\n        padding: 10\n      }\n    },\n    headerTitle: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      color: 'white',\n      fontSize: 22\n    },\n    header: {\n      backgroundColor: 'rgb(0, 132, 255)',\n      padding: 5\n    },\n    messagesContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: 10,\n      alignItems: 'center'\n    },\n    input: {\n      fontSize: 16,\n      padding: 10,\n      outline: 'none',\n      width: 350,\n      border: 'none',\n      borderBottom: '2px solid rgb(0, 132, 255)'\n    }\n  }\n  \n  export default Chatbot","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Form, Input, Button, Select, DatePicker } from 'antd';\n// import config from './aws-exports' // new\n// import Amplify from 'aws-amplify' // new\n// Amplify.configure(config) // new\n\nconst { Option } = Select;\nconst layout = {\n  labelCol: {\n    span: 5,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\n// const userForm = { // after click Submit what we write into the blockchain.\n//   Address: \"区块链的地址\",\n//   temperature: 37,\n//   status: \"\",\n//   date: \"\"\n// };\n\n\n//函数式组件: 表单相关的都在这个函数里\nconst HealthForm = () => {\n  const [form] = Form.useForm();\n\n  const onHealthStatusChange = value => {\n    switch (value) {\n      case 'health':\n        form.setFieldsValue({\n          temperature: '37',\n        });\n        return;\n\n      case 'sympton':\n        form.setFieldsValue({\n          temperature: '38',\n        });\n        return;\n\n      case 'other':\n        form.setFieldsValue({\n          temperature: '37',\n        });\n    }\n  };\n\n  const onSubmit = (values) => {\n    //待补充1-写操作：实现将表单的values写入区块链数据库（该函数在点击submit按钮后触发\n    //现在默认在命令行输入values\n      console.log('Received values of form: ', values);\n  };\n\n  const onFinish = values => {\n    console.log(values);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onFill = () => {\n    form.setFieldsValue({\n      temperature: '37',\n      status: 'Feeling Good',\n    });\n  };\n\n  const handleDateChange = (date, dateString) => {\n    console.log('Selected Time: ', date);\n    console.log('Seleected Time in the format of string', dateString);//也可以用string形式存更方便写入区块链？\n  };\n\n  const style = {\n    form: {\n      // display: 'flex',\n      // justifyContent: 'center'\n      position: 'relative',\n      top: '200px'\n      // top: '50%',\n      // left: '50%'\n    }\n  }\n\n  return (\n    <div name=\"healthform\" style={style.form}>\n    <Form {...layout} form={form} name=\"userHealthForm\" onFinish={onFinish}>\n      <Form.Item\n        name=\"temperature\"\n        label=\"Body Temperature\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name=\"status\"\n        label=\"Status\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select\n          placeholder=\"Select a option and change input text above\"\n          onChange={onHealthStatusChange}\n          allowClear\n        >\n          <Option value=\"health\">Feeling Good</Option>\n          <Option value=\"sympton\">Symptons of Cold & Flu</Option>\n          <Option value=\"other\">Other</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        noStyle\n        shouldUpdate={(prevValues, currentValues) => prevValues.status !== currentValues.status}\n      >\n        {({ getFieldValue }) =>\n          getFieldValue('status') === 'other' ? (\n            <Form.Item\n              name=\"customizeStatus\"\n              label=\"Customize Your Health Status\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          ) : null\n        }\n      </Form.Item>\n      <Form.Item\n          name=\"date\"\n          label=\"Select The Date\"\n          rules={[\n                {\n                  required: true,\n                },\n          ]}\n      >\n         <DatePicker\n           onChange={handleDateChange} />\n      </Form.Item>\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" onClick={onSubmit}>\n          Submit\n        </Button>\n        <Button htmlType=\"button\" onClick={onReset}>\n          Reset\n        </Button>\n        <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\n          Quick Fill\n        </Button>\n      </Form.Item>\n    </Form>\n    </div>\n  );\n};\n\nexport default HealthForm;\n","import React, { Component } from 'react';\nimport './css/ChatBox.css';\nimport { withWebRTC } from 'react-liowebrtc';\nimport config from './aws-exports' // new\nimport Amplify from 'aws-amplify' // new\nimport { Interactions } from 'aws-amplify';\nimport { ChatFeed, Message } from 'react-chat-ui'\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      finalMessage: '',\n      initalMessage: '',\n      messages: [\n        new Message({   // set initial message which is hte first item in the array of message being held in our state\n            id: 1,\n            message: \"\",\n          })\n      ]\n    };\n  }\n    \n//   _handleKeyPress = (e) => { // This will listen to the keyboard input and submit a new message if the Enter key is pressed.\n//     if (e.key === 'Enter') {\n//       this.submitMessage()\n//     }\n//   }\n\n//   onChange(e) { //update the input field with the current value of the text input\n//     const input = e.target.value\n//     this.setState({\n//       input\n//     })\n//   }\n\n  async submitMessage() {\n    const { input } = this.state\n    if (input === '') return\n    const message = new Message({ //input message\n      id: 0,\n      message: input,\n    })\n    \n    let messages;\n    if (input === '1') {\n        messages = [message];\n    } else {\n        messages = [...this.state.messages, message]\n    }\n    this.setState({\n        messages,\n        input: ''\n    })\n\n    const response = await Interactions.send(\"CovidSymptoms\", input); // passing two argumens: the bot name and the value\n    const responseMessage = new Message({ // take the response from the bot and create another message\n      id: 1,\n      message: response.message,\n    })\n    messages  = [...this.state.messages, responseMessage]\n    this.setState({ messages })\n\n    if (response.dialogState === 'Fulfilled') {\n      if (response.intentName === 'CovidSymptomsChecking') {\n        //const { slots: { Temperature, answerquestion, Symptomscheck} } = response\n        const finalMessage = `self checking chat ending!`\n        this.setState({ finalMessage })\n      }\n    }\n  }\n\n  generateChats = () => {\n    if(this.chatBox) {\n      setTimeout(() => { this.chatBox.scrollTop = this.chatBox.scrollHeight; }, 2);\n    }\n    return this.props.chatLog.map((item) => (\n      <div className=\"chat\" key={`chat-${item.name}-${item.timestamp}`}>\n        <b className=\"name\" style={{ color: item.alert ? '#888' : '#333' }}>{item.name}</b> <span className=\"msg\">{item.message}</span>\n      </div>\n    ));\n  }\n\n  handleSend = (chatMsg) => {\n    this.props.webrtc.shout('chat', chatMsg);\n    this.props.onSend(chatMsg);\n  }\n  \n\n  handleKeyUp = (evt) => {\n    if (evt.keyCode === 13) {\n        if (this.state.input == \"1\") {\n            this.state.initalMessage = \"symptom check\";\n        } else if (this.state.input == \"2\") {\n            this.state.initalMessage = \"talk with experts\";\n        }\n        if (this.state.initalMessage == \"symptom check\") {\n            this.submitMessage()\n        } else {\n            this.handleSend(this.state.input);\n            this.setState({ input: '' });\n        }\n    }\n  }\n\n  handleInputChange = (evt) => this.setState({ input: evt.target.value });\n\n  render() {\n    const { chatLog } = this.props;\n    return (\n      <div className=\"container\">\n        <div className=\"chatHeader\">\n          <h1 className=\"title\">P2P Chat Example</h1>\n          <hr />\n        </div>\n        <div className=\"chatBox\" ref={(div) => this.chatBox = div}>\n            <div className=\"choice\">\n                <p>Do you want to do symptom check or talk with our experts? \n                    type 1 for symtom check, 2 for talk with expert</p>\n            </div>\n\n            {this.state.initalMessage=='symptom check' ? (\n                 <div className=\"chatbot\">\n                 <ChatFeed\n                 messages={this.state.messages}\n                 hasInputField={false}\n                 bubbleStyles={styles.bubbleStyles}\n                 />\n             </div>\n            ): (\n                <div>\n                    {chatLog.length ? this.generateChats() : (\n                        <div className=\"info\">\n                        <p>To test this component out, open this page in a new tab or send it to a friend.</p>\n                        </div>\n                    )}  \n                </div>\n            )}\n        </div>\n        <hr />\n        <div className=\"bottomBar\">\n          <input style={styles.bubbleStyles} className=\"chatInput\" type=\"text\" placeholder=\"Type a message...\" onKeyUp={this.handleKeyUp} onChange={this.handleInputChange} value={this.state.input} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n    bubbleStyles: {\n        text: {\n          fontSize: 16,\n          \n        },\n        chatbubble: {\n          borderRadius: 30,\n          padding: 10\n        }\n      }\n}\n\nexport default withWebRTC(ChatBox);","import React, { Component } from 'react';\nimport Chatbot from './chatbot';\nimport config from './aws-exports' // new\nimport Amplify from 'aws-amplify' // new\nimport HealthForm from './HealthForm';\nimport Code from './Code';\nimport ChatBox from './ChatBox';\nimport './css/App.css'\nimport { LioWebRTC } from 'react-liowebrtc';\nimport { Navbar, Form, Nav, FormControl } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nAmplify.configure(config) // new\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatLog: [],\n            options: {\n                debug: true,\n                dataOnly: true\n            }\n        }\n    }\n\n    join = (webrtc) => webrtc.joinRoom('my-p2p-app-demo');\n\n    handleCreatedPeer = (webrtc, peer) => {\n        this.addChat(`Peer-${peer.id.substring(0, 5)} joined the room!`, ' ', true);\n    }\n\n    handlePeerData = (webrtc, type, payload, peer) => {\n        switch (type) {\n            case 'chat':\n                this.addChat(`Peer-${peer.id.substring(0, 5)}`, payload);\n                break;\n            default:\n                return;\n        };\n    }\n\n    addChat = (name, message, alert = false) => {\n        this.setState({\n            chatLog: this.state.chatLog.concat({\n                name,\n                message: `${message}`,\n                timestamp: `${Date.now()}`,\n                alert\n            })\n        });\n    }\n\n    render() {\n        const { chatLog, options } = this.state;\n        return (\n            <div className=\"App\">\n                <Navbar className=\"headerbar\" bg=\"dark\" variant=\"dark\">\n                    <div class=\"col-4\"></div>\n                    <div class=\"home col-4\" className=\"title\">\n                        <div class=\"h3\">Covid-19 Symptom Checker</div>\n                    </div>\n                    {/* <Navbar.Brand style={style.customflex}>Covid-19 Symptom Checker</Navbar.Brand> */}\n                </Navbar>\n                <br></br>\n                {/* <Router>\n                    <Route path=\"/\" render={props =>\n                        <div>\n                            <Code />\n                            <HealthForm />\n                        </div>}\n                    />\n                </Router> */}\n                <LioWebRTC\n                    options={options}\n                    onReady={this.join}\n                    onCreatedPeer={this.handleCreatedPeer}\n                    onReceivedPeerData={this.handlePeerData}\n                >\n                    <ChatBox\n                        chatLog={chatLog}\n                        onSend={(msg) => msg && this.addChat('Me', msg)}\n                    />\n                </LioWebRTC>\n            </div >\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n\t<App />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA */}\n\n\n\n\nserviceWorker.register();\n"],"sourceRoot":""}